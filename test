# Titan Memory MCP Server

An implementation inspired by Google Research's paper ["Generative AI for Programming: A Common Task Framework"](https://arxiv.org/abs/2501.00663). This server provides a neural memory system that can learn and predict sequences while maintaining state through a memory vector.

This is my attempt at solving a major frustration of mine having dealt with LLMs for a while: the inability to maintain context between interactions.

## GOAL

Have an independant memory system that can be used by any LLM to intelligently maintain context between interactions.

## 🚀 One-Step Setup

1. Run this single command:

```bash
npx -y @smithery/cli@latest run @henryhawke/mcp-titan
```

That's it! The server will automatically:

- Initialize with optimal settings
- Connect to your LLM
- Start learning from interactions
- Maintain persistent memory
- Handle all error recovery

## 🤖 LLM Integration

The server automatically integrates with any LLM that supports MCP (like Claude or GPT). To enable this:

1. Copy the contents of `docs/llm-system-prompt.md` into your LLM's system prompt
2. The LLM will automatically:
   - Use the memory system for every interaction
   - Learn from all conversations
   - Provide context-aware responses
   - Maintain persistent knowledge

No additional configuration needed - it just works!

## 🔄 Automatic Features

- Self-initialization
- WebSocket and stdio transport support
- Automatic state persistence
- Real-time memory updates
- Error recovery and reconnection
- Resource cleanup

## 🧠 Memory Architecture

Three-tier memory system:

- Short-term memory for immediate context
- Long-term memory for persistent patterns
- Meta memory for high-level abstractions

## 🛠️ Advanced Configuration (Optional)

If you need custom settings:

```bash
npx -y @smithery/cli@latest run @henryhawke/mcp-titan --config '{
  "port": 3000,
  "inputDim": 768,
  "outputDim": 768
}'
```

## 📚 Technical Details

- Built with TensorFlow.js
- WebSocket and stdio transport support
- Automatic tensor cleanup
- Type-safe implementation
- Memory-efficient design

## 🔒 Security

- Secure WebSocket connections
- Automatic error handling
- Resource cleanup
- State persistence
- Access control

## 📝 License

MIT License - feel free to use and modify!

## 🙏 Acknowledgments

- Built with [Model Context Protocol](https://modelcontextprotocol.io)
- Uses [TensorFlow.js](https://tensorflow.org/js)
- Inspired by [synthience/mcp-titan-cognitive-memory](https://github.com/synthience/mcp-titan-cognitive-memory/)
